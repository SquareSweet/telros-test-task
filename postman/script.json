{
	"info": {
		"_postman_id": "5dc6b156-8c82-4f20-a627-6da912426831",
		"name": "Telres test task API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22600262"
	},
	"item": [
		{
			"name": "Unauthorized request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 401\", function () {\r",
							"    pm.response.to.be.unauthorized;    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let user;\r",
							"    try {\r",
							"        user = rnd.getUser();\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(user),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 200 and contain json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"User should comtain fields: id, lastName, firstName, midName, email, birthday, phoneNumber\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('lastName');\r",
							"    pm.expect(target).to.have.property('firstName');\r",
							"    pm.expect(target).to.have.property('midName');\r",
							"    pm.expect(target).to.have.property('birthday');\r",
							"    pm.expect(target).to.have.property('email');\r",
							"    pm.expect(target).to.have.property('phoneNumber');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data should match request json\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.lastName).equal(target.lastName, 'Last name should match request');\r",
							"    pm.expect(source.firstName).equal(target.firstName, 'First name should match request');\r",
							"    pm.expect(source.midName).equal(target.midName, 'Middle name should match request');\r",
							"    pm.expect(source.birthday).equal(target.birthday, 'Birthday should match request');\r",
							"    pm.expect(source.email).equal(target.email, 'Email should match request');\r",
							"    pm.expect(source.phoneNumber).equal(target.phoneNumber, 'Phone number should match request');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Existing Email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let user;\r",
							"    try {\r",
							"        user = rnd.getUser();\r",
							"        await api.addUser(user);\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(user),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 409 and contain json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        await api.addUser(rnd.getUser());\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 200 and contain json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"User should comtain fields: id, lastName, firstName, midName, email, birthday, phoneNumber\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('lastName');\r",
							"    pm.expect(target[0]).to.have.property('firstName');\r",
							"    pm.expect(target[0]).to.have.property('midName');\r",
							"    pm.expect(target[0]).to.have.property('birthday');\r",
							"    pm.expect(target[0]).to.have.property('email');\r",
							"    pm.expect(target[0]).to.have.property('phoneNumber');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let newUser;\r",
							"    try {\r",
							"        let user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        newUser = rnd.getUser();\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"lastName\": newUser.lastName,\r",
							"            \"firstName\": newUser.firstName,\r",
							"            \"midName\": newUser.midName,\r",
							"            \"birthday\": newUser.birthday,\r",
							"            \"email\": newUser.email,\r",
							"            \"phoneNumber\": newUser.phoneNumber\r",
							"        }),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 200 and contain json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"User should comtain fields: id, lastName, firstName, midName, email, birthday, phoneNumber\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('lastName');\r",
							"    pm.expect(target).to.have.property('firstName');\r",
							"    pm.expect(target).to.have.property('midName');\r",
							"    pm.expect(target).to.have.property('birthday');\r",
							"    pm.expect(target).to.have.property('email');\r",
							"    pm.expect(target).to.have.property('phoneNumber');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data should match request json\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.lastName).equal(target.lastName, 'Last name should match request');\r",
							"    pm.expect(source.firstName).equal(target.firstName, 'First name should match request');\r",
							"    pm.expect(source.midName).equal(target.midName, 'Middle name should match request');\r",
							"    pm.expect(source.birthday).equal(target.birthday, 'Birthday should match request');\r",
							"    pm.expect(source.email).equal(target.email, 'Email should match request');\r",
							"    pm.expect(source.phoneNumber).equal(target.phoneNumber, 'Phone number should match request');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Existing Email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let user, newUser;\r",
							"    try {\r",
							"        user = await api.addUser(rnd.getUser());\r",
							"        user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user2.id);\r",
							"        newUser = rnd.getUser();\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"lastName\": newUser.lastName,\r",
							"            \"firstName\": newUser.firstName,\r",
							"            \"midName\": newUser.midName,\r",
							"            \"birthday\": newUser.birthday,\r",
							"            \"email\": user.email,\r",
							"            \"phoneNumber\": newUser.phoneNumber\r",
							"        }),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 409 and contain json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        let user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 200 and contain json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Contacts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        let user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 200 and contain json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"User should comtain fields: id, lastName, firstName, midName, email, birthday, phoneNumber\", function () {\r",
							"    pm.expect(target).to.have.property('email');\r",
							"    pm.expect(target).to.have.property('phoneNumber');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/contacts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"contacts"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Contacts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let newUser;\r",
							"    try {\r",
							"        let user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        newUser = rnd.getUser();\r",
							"    } catch(err) {\r",
							"        console.error(\"Error occurred when preparing test data.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"email\": newUser.email,\r",
							"            \"phoneNumber\": newUser.phoneNumber\r",
							"        }),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be 200 and contain json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"User should comtain fields: email, phoneNumber\", function () {\r",
							"    pm.expect(target).to.have.property('email');\r",
							"    pm.expect(target).to.have.property('phoneNumber');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data should match request json\", function () {\r",
							"    pm.expect(source.email).equal(target.email, 'Email should match request');\r",
							"    pm.expect(source.phoneNumber).equal(target.phoneNumber, 'Phone number should match request');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/contacts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"contacts"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/api/users\", user, \"Error occurred when adding new user: \", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Error occurred on sending POST-request: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Error occurred on sending PATCH-request: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Error occurred on sending GET-request: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Error occurred on sending request: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                auth: {",
					"                    type: \"basic\",",
					"                    basic: [",
					"                        {key: \"username\", value:\"admin\"},",
					"                        {key: \"password\", value:\"admin\"}",
					"                    ]",
					"                },",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Sending request: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"Error occurred on sending request.\\n\", err,",
					"                             \"Request data:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Result: response code - \", response.code, \", body: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),",
					"            lastName: pm.variables.replaceIn('{{$randomLastName}}'),",
					"            firstName: pm.variables.replaceIn('{{$randomFirstName}}'),",
					"            midName: pm.variables.replaceIn('{{$randomFirstName}}'),",
					"            birthday: this.getBirthday(),",
					"            phoneNumber: pm.variables.replaceIn('{{$randomPhoneNumber}}')",
					"        };",
					"    }",
					"",
					"    getBirthday() {",
					"        let moment = require('moment');",
					"",
					"        let birthday = pm.variables.replaceIn('{{$randomDatePast}}');",
					"",
					"        return moment(birthday).format('YYYY-MM-DD');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "requestBody",
			"value": "",
			"type": "string"
		}
	]
}